set nocompatible
filetype off
set showcmd
set rtp+=~/.vim/bundle/Vundle.vim

call plug#begin()
Plug 'dense-analysis/ale'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Fuzzy Finder
Plug 'airblade/vim-rooter'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}
Plug 'machakann/vim-highlightedyank'
call plug#end()

" Map SHIFT-f to open the files
map <S-f> :Files<CR>
nmap <leader>b; :Buffers<CR>

" Auto Completion Configuration
set completeopt=noinsert,menuone,noselect

let g:deoplete#enable_at_startup = 1

call vundle#begin()
Plugin 'vim-plug'
Plugin 'VundleVim/Vundle.vim'
Plugin 'hashivim/vim-terraform'
Plugin 'Yggdroot/indentLine'
Plugin 'Valloric/YouCompleteMe'
Plugin 'rdnetto/YCM-Generator'
Plugin 'itchyny/lightline.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'easymotion/vim-easymotion'
Plugin 'rust-lang/rust.vim'
Plugin 'rust-lang/rls'
call vundle#end()

syntax enable
syntax on
filetype plugin indent on
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab


let g:ycm_rust_src_path = "~/.rustup/rust"

inoremap ii <Esc>
inoremap " ""<left>
inoremap ' ''<left>
inoremap ( ()<left>
inoremap [ []<left>
inoremap { {}<left>
inoremap {<CR> {<CR>}<ESC>O
inoremap (<CR> (<CR>)<ESC>O
inoremap {;<CR> {<CR>};<ESC>O

inoremap <expr><Tab> (pumvisible()?(empty(v:completed_item)?"\<C-n>":"\<C-y>"):"\<Tab>")


set number
set showcmd
set ruler
set backspace=indent,eol,start
set incsearch
set ignorecase
set hlsearch

" Search the trailing whitespaces with '/\s\+$'
highlight RedundantSpaces ctermbg=red guibg=red
match RedundantSpaces /\s\+$/

" Check Spelling with Specific Language
" set spell spelllang=en_us

set nocursorline
" set textwidth=80

" Avoid relative number for cursor.
set norelativenumber

" Indentation

set autoindent
set smartindent
set complete-=1
set showmatch
set smarttab
set tabstop=4
set shiftwidth=4
set expandtab

" Persistent undo
" set undofile
" set undodir=~/.vim/undodir

" This allows to yank contents to another file.
set clipboard=unnamedplus

" For groovy syntax.
au BufNewFile,BufRead Jenkinsfile setf groovy

" YAML syntax
" https://github.com/chase/vim-ansible-yaml
Bundle 'chase/vim-ansible-yaml'
let g:indentLine_char = '┊'

" Set the status line in the vim
set laststatus=2

nnoremap Y "+y
vnoremap Y "+y
nnoremap yY ^"+y$
set clipboard=unnamed

" Go-VIM Specific
filetype plugin indent on

set autowrite

" Go syntax highlighting
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_operators = 1

" Easymotion Key Bindings
nmap s <Plug>(easymotion-overwin-f)
nmap s <Plug>(easymotion-overwin-f2)

"s Auto formatting and importing
let g:go_fmt_autosave = 1
let g:go_fmt_command = "goimports"

" Status line types/signatures
let g:go_auto_type_info = 1

" Run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

" Map keys for most used commands.
" Ex: `\b` for building, `\r` for running and `\b` for running test.
autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
autocmd FileType go nmap <leader>r  <Plug>(go-run)
autocmd FileType go nmap <leader>t  <Plug>(go-test)

" NerdTree Config
map <C-z> :NERDTreeToggle<CR> " Toggle side window with `CTRL+z`.
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let NERDTreeShowHidden=1 " Show hidden files
let g:rustfmt_autosave = 1
let g:rustfmt_emit_files = 1
let g:rustfmt_fail_silently = 0

" Open hotkeys
map <F-p> :Files<CR>

