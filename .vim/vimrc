set nocompatible
filetype plugin indent on
set showcmd
set rtp+=~/.vim/bundle/Vundle.vim

call plug#begin()
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Fuzzy Finder
Plug 'airblade/vim-rooter'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'machakann/vim-highlightedyank'
Plug 'mattn/vim-lsp-settings'
Plug 'altercation/vim-colors-solarized'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'yami-beta/asyncomplete-omni.vim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/nvim-treesitter-textobjects'
Plug 'nvzone/showkeys'
call plug#end()

" Map SHIFT-f to open the files
map <S-f> :Files<CR>
nmap <leader>b; :Buffers<CR>

" Auto Completion ConfiguratioN
set completeopt=noinsert,menuone,noselect

let g:deoplete#enable_at_startup = 1

call vundle#begin()
Plugin 'hashivim/vim-terraform'
Plugin 'Yggdroot/indentLine'
" Plugin 'Valloric/YouCompleteMe'
" Plugin 'rdnetto/YCM-Generator'
Plugin 'itchyny/lightline.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'easymotion/vim-easymotion'
Plugin 'rust-lang/rust.vim'
Plugin 'rust-lang/rls'
call vundle#end()

syntax enable
syntax on
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd BufEnter * lcd %:p:h " Set the current directory when vim open a file

inoremap ii <Esc>
" inoremap " ""<left>
" inoremap ' ''<left>
inoremap ( ()<left>
inoremap [ []<left>
inoremap { {}<left>
inoremap {<CR> {<CR>}<ESC>O
inoremap (<CR> (<CR>)<ESC>O
inoremap {;<CR> {<CR>};<ESC>O

" Delete between the two parentheis () {} [] with:
" ca + () or [] or {}

inoremap <expr><Tab> (pumvisible()?(empty(v:completed_item)?"\<C-n>":"\<C-y>"):"\<Tab>")

set number
set showcmd
set ruler
set backspace=indent,eol,start
set incsearch
set ignorecase
set hlsearch
hi Search ctermbg=LightYellow
hi Search ctermfg=Red

" Search the trailing whitespaces with '/\s\+$'
 highlight RedundantSpaces ctermbg=red guibg=red
 match RedundantSpaces /\s\+$/

" Check Spelling with Specific Language
" set spell spelllang=en_us

set nocursorline
" set textwidth=80

" Avoid relative number for cursor.
set norelativenumber

" Indentation

set autoindent
set smartindent
set complete-=1
set showmatch
set smarttab
set tabstop=4
set shiftwidth=4
set expandtab

" Persistent undo
" set undofile
" set undodir=~/.vim/undodir

" For groovy syntax.
au BufNewFile,BufRead Jenkinsfile setf groovy

" YAML syntax
" https://github.com/chase/vim-ansible-yaml
Bundle 'chase/vim-ansible-yaml'
let g:indentLine_char = '¦'

" Set the status line in the vim
set laststatus=2

nnoremap Y "+y
vnoremap Y "+y
nnoremap yY ^"+y$
set clipboard=unnamed
set clipboard=unnamedplus


set autowrite

" Go syntax highlighting
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_operators = 1

" Easymotion Key Bindings
nmap s <Plug>(easymotion-overwin-f)
nmap s <Plug>(easymotion-overwin-f2)

"s Auto formatting and importing
let g:go_fmt_autosave = 1
let g:go_fmt_command = "goimports"

" Status line types/signatures
let g:go_auto_type_info = 1

" Run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

" Map keys for most used commands.
" Ex: `\b` for building, `\r` for running and `\b` for running test.
autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
autocmd FileType go nmap <leader>r  <Plug>(go-run)
autocmd FileType go nmap <leader>t  <Plug>(go-test)

" NerdTree Config
map <C-z> :NERDTreeToggle<CR> " Toggle side window with `CTRL+z`.

let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let NERDTreeShowHidden=1 " Show hidden files

"" Start NERDTree and leave the cursor in it.
"autocmd VimEnter * NERDTree

"" Start NERDTree and put the cursor back in the other window.
"autocmd VimEnter * NERDTree | wincmd p

"" Start NERDTree when Vim is started without file arguments.
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif

"" Start NERDTree. If a file is specified, move the cursor to its window.
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * NERDTree | if argc() > 0 || exists("s:std_in") | wincmd p | endif
"
"" Start NERDTree when Vim starts with a directory argument.
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
    \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif

let g:rustfmt_autosave = 1
let g:rustfmt_emit_files = 1
let g:rustfmt_fail_silently = 0

"Remove all trailing whitespace by pressing CTRL + Space
nnoremap <C-@> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>

" Extra Conf for YouCompleteMe
"let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"
"let g:ycm_rust_src_path = "~/.rustup/rust"

" Execute `cargo run` without leaving terminal
map <C-x> :! clear && cargo run<CR>

" Remove all trailing whitespace by pressing CTRL + Space
nnoremap <C-@> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>

" C Based config
augroup project
  autocmd!
  autocmd BufRead,BufNewFile *.h,*.c set filetype=c.doxygen
augroup END

" add extra paths.
let s:extpaths=expand("~/.vim.extpaths")
if filereadable(s:extpaths)
    execute "source ".s:extpaths
endif

set path+=.,src/include,/usr/include,../../criu/include/common,include

" Suggestion: show info for completion candidates in a popup menu
if has("patch-8.1.1904")
  set completeopt+=popup
  set completepopup=align:menu,border:off,highlight:Pmenu
endif

function! Omni()
    call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
                    \ 'name': 'omni',
                    \ 'whitelist': ['go'],
                    \ 'completor': function('asyncomplete#sources#omni#completor')
                    \  }))
endfunction

au VimEnter * :call Omni()

inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"

"" Directories and everything under /src
"let g:rooter_targets = ['/', '/src/*']

